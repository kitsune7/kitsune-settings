#!/bin/bash
shopt -s extglob
shopt -s dotglob

alias showInstallScriptUsage='usage: sync [-h | [-q]]'
overwrite=""
quiet=""

# https://wiki.bash-hackers.org/howto/getopts_tutorial
while getopts ":hq" option; do
  case "${option}" in
    h) # Help
      showInstallScriptUsage
    ;;
    q)
      quiet="true"
    ;;
    \?)
      error "Unexpected option ${option}"
      showInstallScriptUsage
    ;;
  esac
done

function log () {
  if [[ ! "$quiet" ]]; then
    echo "$1"
  fi
}

function getCpOptions () {
  options=$(echo "-$([[ -z $overwrite ]] && echo 'i')$([[ -z $quiet ]] && echo 'v')")
  [[ $options != '-' ]] && echo "$options"
}

function copy_files () {
  srcDir=$1
  destDir=$2
  for i in "$srcDir"/*; do
    file=$(basename -- "$i")
    rsync -a --progress "$srcDir/$file" "$destDir"
  done
}

function sync_newest () {
  file1="$1"
  file2="$2"

  # If neither file exists, nothing to do
  if [[ ! -e "$file1" ]] && [[ ! -e "$file2" ]]; then
    return
  fi

  # Copy from file1 to file2 if file1 is newer
  rsync -u "$file1" "$file2" 2>/dev/null

  # Copy from file2 to file1 if file2 is newer
  rsync -u "$file2" "$file1" 2>/dev/null
}

function sync_dirs () {
  dir1="$1"
  dir2="$2"

  # Get relative paths of all files and directories from both directories
  all_files=$( (cd "$dir1" 2>/dev/null && find . -print) && (cd "$dir2" 2>/dev/null && find . -print) | sort -u)

  if [[ -z "$all_files" ]]; then
    log "No files found in either directory to sync."
    return
  fi

  # Loop through each unique path
  for relative_path in $all_files; do
    # The find command includes '.' for the directory itself, skip it.
    if [[ "$relative_path" == "." ]]; then
      continue
    fi

    file1="$dir1/$relative_path"
    file2="$dir2/$relative_path"

    # If it's a directory, we don't need to sync it with sync_newest,
    # as we are handling files directly. We just need to make sure it exists
    # on the other side if it doesn't.
    if [[ -d "$file1" ]] && [[ ! -e "$file2" ]]; then
      mkdir -p "$file2"
      log "Created directory $file2"
    elif [[ -d "$file2" ]] && [[ ! -e "$file1" ]]; then
      mkdir -p "$file1"
      log "Created directory $file1"
    elif [[ -f "$file1" ]] || [[ -f "$file2" ]]; then
      # It's a file, so sync the newest version.
      sync_newest "$file1" "$file2"
    fi
  done
}

currentDir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

copy_files "$currentDir/home-settings" "$HOME"
copy_files "$currentDir/oh-my-zsh-custom" "$HOME/.oh-my-zsh/custom"
sync_newest "$currentDir/other-settings/zed/settings.json" "$HOME/.config/zed/settings.json"
sync_dirs "$currentDir/other-settings/zed/snippets" "$HOME/.config/zed/snippets"
sync_dirs "$currentDir/other-settings/claude/agents" "$HOME/.claude/agents"
sync_dirs "$currentDir/other-settings/claude/commands" "$HOME/.claude/commands"
rsync -a --progress "$currentDir/other-settings/com.googlecode.iterm2.plist" "${HOME}/Library/Preferences"

log "Finished syncing settings"
exit 0
